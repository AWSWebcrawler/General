from io import StringIO
from lxml import etree
import logging
from datetime import datetime
import re

"""The item factory parses the passed html text and extracts the desired attributes. The attributes are then stored in a
dictionary and returned."""


def create_item(html, url):
    """The dictionary contains the attributes als name:value pairs. The value is generated by a method call. """
    logging.debug("Calling the create_item function")

    dt = datetime.now()

    parser = etree.HTMLParser()
    tree = etree.parse(StringIO(html), parser)

    logging.debug("Tree is created from the parsed html")

    dic = {
        "name": get_name(tree),
        "product_id": get_product_id(tree),
        "price": get_price(tree),
        "price_regular": get_price_regular(tree),
        "prime": get_prime(tree),
        "discount in euros": get_discount_in_euros(tree),
        "percent discount": get_percent_discount(tree),
        "selled_by_amazon": get_selled_by_amazon(tree),
        "seller": get_seller(tree),
        "asin": get_asin(tree),
        "url": get_url(url),
        "timestamp": get_timestamp(dt),
        "date": get_date(dt),
        "time": get_time(dt),
    }

    return dic


"""The individual methods receive the html text. Select the correct values using the appropriate html tags. 
Validate whether the values make any sense at all and, if necessary, 
transform the values to get the desired return value."""


def get_name(tree):
    """select, validate and transform the name from the html"""

    logging.debug("Calling the get_name function")

    try:
        nameTag = tree.find('.//span[@id = "title"]')

        if nameTag.text != "" and nameTag.text != None:
            logging.debug("item name found")
            return nameTag.text.strip()

        else:
            logging.error("item name is empty")

            return "-"
    except:
        pass

    try:
        nameTag = tree.find('.//span[@id = "productTitle"]')

        if nameTag.text != "" and nameTag.text != None:
            logging.debug("item name found")
            return nameTag.text.strip()

        else:
            logging.error("item name is empty")

    except:
        logging.error("tag for item name not found in html tree")

    return "-"


def get_price(tree):
    """select, validate and transform the price from the html"""

    logging.debug("Calling the get_price function")

    try:
        priceTag = tree.find('.//div[@class = "a-section aok-hidden twister-plus-buying-options-price-data"]')

        if priceTag == None:
            logging.error("tag for item price not found in html tree")

        else:
            try:
                price = priceTag.text.split("\"priceAmount\":")[1].split(",")[0]

                if price != "" and price != None:
                    logging.debug("item price found")

                    if re.match('[0-9]+\.[0-9][0-9]', price):
                        return price
                    else:
                        logging.warning("Item price has a wrong format")
                        return price

                else:
                    logging.error("item price is empty")

            except:
                logging.error("Error during parsing price tag")

    except:
        logging.error("Error by searching item price in the html tree")

    return "-"


def get_selled_by_amazon(tree):
    """select, validate and transform the price from the html"""

    logging.debug("Calling the get_selled_by_amazon function")

    try:
        #div_tag
        divTag = tree.find('.//div[@id = "merchant-info"]')

        if divTag is None:
            logging.error("tag for item selled_by_amazon not found in html tree")

        try:
            sellerTag = divTag.find('span')
            seller = sellerTag.text
            seller = seller.split(" ")[-1].replace(".", "")

            if "Amazon" in seller:
                return True
            else:
                return False


        except:
            logging.error("Error during parsing selled_by_amazon tag")

    except:
        logging.error("Error by searching item selled_by_amazon in the html tree")

    return None


def get_date(dt):
    logging.debug("Calling the get_date function")

    date = dt.strftime("%Y-%m-%d")
    return date


def get_time(dt):
    logging.debug("Calling the get_time function")

    time = dt.strftime("%H:%M:%S")
    return time


def get_timestamp(dt):
    logging.debug("Calling the get_timestamp function")

    ts = datetime.timestamp(dt)
    return ts


def get_url(url):
    """select, validate and transform the url from the html """

    logging.debug("Calling the get_url function")

    if re.match('^https://www.amazon.de', url):
        return url
    else:
        #rename
        logging.warning("Item url has a wrong format")
        return url


def get_asin(tree):
    logging.debug("Calling the get_asin function")

    #TODO Exceptions umbauen
    # asinTag = tree.find('.//input[@id = "ASIN"]')
    # if asinTag is None: raise Exception()


    try:
        asinTag = tree.find('.//input[@id = "ASIN"]')

        if asinTag == None:
            logging.error("tag for item price not found in html tree")

        else:
            try:
                asin = asinTag.attrib["value"]

                if asin != "" and asin != None:
                    logging.debug("item asin found")

                    if re.match('^([0-9]|[A-Z])+$', asin):
                        return asin
                    else:
                        logging.warning("Item asin has a wrong format")
                        return asin

                else:
                    logging.error("item asin is empty")

            except:
                logging.error("Error during parsing asin tag")
    except:
        logging.error("Error by searching item asin in the html tree")

    return "-"


def get_seller(tree):
    logging.debug("Calling the get_seller function")

        #is_seller_amazon
    if get_selled_by_amazon(tree):
        return "Amazon"
    else:
        try:
            divTag = tree.find('.//div[@id = "merchant-info"]')

            if divTag == None:
                logging.error("tag for item seller not found in html tree")

            try:
                anchorTag = divTag.find('a')
                sellerTag = anchorTag.find('span')
                seller: str = sellerTag.text

                #is_seller_empty = (seller != "")

                if seller != "" and seller is not None:
                    logging.debug("item seller found")
                    return seller
                else:
                    logging.error("item seller is empty")

            except:
                logging.error("Error during parsing seller tag")

        except:
            logging.error("Error by searching item seller in the html tree")

    return "-"


def get_discount_in_euros(tree):
    logging.debug("Calling the get_discount function")

    try:
        tableDataTag = tree.find('.//td[@class = "a-span12 a-color-price a-size-base"]')
        discountTag = tableDataTag.find('.//span[@class = "a-offscreen"]')

        if discountTag == None:
            logging.error("tag for item discount_in_euros not found in html tree")

        else:
            try:
                #
                discount = discountTag.text
                discount = re.sub('\D', ' ', discount)
                discount = discount.strip()
                discount = re.sub(' ', '.', discount)

                if discount != "" and discount != "." and discount != None:
                    logging.debug("item discount_in_euros found")
                    return discount

                else:
                    logging.warning("item discount_in_euros is empty")

            except:
                logging.warning("Can not parse tag discount_in_euros")
    except:
        logging.warning("Can not find item discount_in_euros in the html tree")

    return "-"


def get_percent_discount(tree):
    logging.debug("Calling the get_discount function")

    try:
        tableDataTag = tree.find('.//td[@class = "a-span12 a-color-price a-size-base"]')
        discountTag = tableDataTag.find('.//span[@data-a-color = "price"]')

        if discountTag == None:
            logging.error("tag for item percent_discount not found in html tree")

        else:
            try:
                discount = discountTag.tail
                discount = re.sub('\D', ' ', discount)
                discount = discount.strip()
                discount = re.sub(' ', '.', discount)

                if discount != "" and discount != "." and discount != None:
                    logging.debug("item percent_discount found")
                    return discount

                else:
                    logging.warning("item percent_discount is empty")

            except:
                logging.warning("Can not parse tag percent_discount")
    except:
        logging.warning("Can not find item percent_discount in the html tree")

    return "-"


def get_prime(tree):
    logging.debug("Calling the get_prime function")

    try:
        #TODO Aufpassen ;)
        primeTags = tree.findall('.//i[@class = "a-icon a-icon-prime"]')

        if primeTags == None:
            logging.error("tag for item prime not found in html tree")

        else:
            logging.debug("item prime found")
            if len(primeTags):
                return True
            else:
                return False


    except:
        logging.error("Error by searching item prime in the html tree")

    return "-"

# current_price
def get_price_regular(tree):
    logging.debug("Calling the get_price_regular function")

    try:
        spanTag = tree.find('.//span[@data-a-color = "secondary"]')
        regular_priceTag = spanTag.find('.//span[@class = "a-offscreen"]')

        if regular_priceTag == None:
            logging.error("tag for item regular_price not found in html tree")

        else:
            try:
                regular_price = regular_priceTag.text
                regular_price = re.sub('\D', ' ', regular_price)
                regular_price = regular_price.strip()
                regular_price = re.sub(' ', '.', regular_price)

                if regular_price != "" and regular_price != "," and regular_price != None:
                    logging.debug("item seller found")
                    return regular_price
                else:
                    logging.warning("item regular_price is empty")

            except:
                logging.warning("Can not parse item regular_price")

    except:
        logging.warning("Can not find item regular_price in the html tree")

    return get_price(tree)


def get_product_id(tree):
    logging.debug("Calling the get_product_id function")
    pass
