"""The item factory parses the passed html text and extracts
the desired attributes. The attributes are then stored in a
dictionary and returned."""

import logging
from datetime import datetime
from io import StringIO

from lxml import etree

from crawler.item_factory.item_amazon_choice import _get_amazon_choice
from crawler.item_factory.item_amazon_choice_for import _get_amazon_choice_for
from crawler.item_factory.item_asin import _get_asin
from crawler.item_factory.item_brand import _get_brand
from crawler.item_factory.item_country_of_origin import _get_country_of_origin
from crawler.item_factory.item_current_price import _get_current_price
from crawler.item_factory.item_date import _get_date
from crawler.item_factory.item_discount_in_euros import _get_discount_in_euros
from crawler.item_factory.item_manufacturer import _get_manufacturer
from crawler.item_factory.item_name import _get_name
from crawler.item_factory.item_number_of_reviews import _get_number_of_reviews
from crawler.item_factory.item_on_sale_since import _get_on_sale_since
from crawler.item_factory.item_percent_discount import _get_percent_discount
from crawler.item_factory.item_price_regular import _get_regular_price
from crawler.item_factory.item_prime import _get_prime
from crawler.item_factory.item_product_dimensions import \
    _get_product_dimensions
from crawler.item_factory.item_product_id import _get_product_id
from crawler.item_factory.item_review_score import _get_review_score
from crawler.item_factory.item_seller import _get_seller
from crawler.item_factory.item_shipping import _get_shipping
from crawler.item_factory.item_sold_by_amazon import _get_sold_by_amazon
from crawler.item_factory.item_time import _get_time
from crawler.item_factory.item_timestamp import _get_timestamp
from crawler.item_factory.item_url import _get_url
from crawler.logging.decorator import decorator_for_logging


@decorator_for_logging
def create_item(html: str, url: str, function_name_with_html: dict) -> dict:
    """The dictionary contains the attributes as name:value pairs. The value
    is generated by a method call. The individual methods receive the html text.
    Select the correct values using the appropriate html tags. Validate whether
    the values make any sense at all and, if necessary, transform the values to get the
    desired return value."""

    logging.debug("Calling the create_item function")

    datetime_now = datetime.now()

    parser = etree.HTMLParser()
    tree = etree.parse(StringIO(html), parser)

    logging.debug("Tree is created from the parsed html")

    dic = {
        "name": _check_return_value(
            _get_name(tree), "get_name", function_name_with_html, html, tree
        ),
        "current_price": _check_return_value(
            _get_current_price(tree),
            "get_current_price",
            function_name_with_html,
            html,
            tree,
        ),
        "price_regular": _get_regular_price(tree),
        "prime": _get_prime(tree),
        "discount_in_euros": _get_discount_in_euros(tree),
        "percent_discount": _get_percent_discount(tree),
        "sold_by_amazon": _get_sold_by_amazon(tree),
        "seller": _get_seller(tree),
        "brand": _get_brand(tree),
        "shipping": _get_shipping(tree),
        "amazon_choice": _get_amazon_choice(tree),
        "amazon_choice_for": _get_amazon_choice_for(tree),
        "asin": _check_return_value(
            _get_asin(tree), "get_asin", function_name_with_html, html, tree
        ),
        "product_id": _get_product_id(tree),
        "manufacturer": _get_manufacturer(tree),
        "country_of_origin": _get_country_of_origin(tree),
        "product_dimensions": _get_product_dimensions(tree),
        "number_of_reviews": _get_number_of_reviews(tree),
        "review_score": _get_review_score(tree),
        "on_sale_since": _get_on_sale_since(tree),
        "url": _check_return_value(
            _get_url(url), "_get_url", function_name_with_html, html, tree
        ),
        "timestamp": _get_timestamp(datetime_now),
        "date": _get_date(datetime_now),
        "time": _get_time(datetime_now),
    }

    return dic


@decorator_for_logging
def _check_return_value(
    value, function_name, html_with_error: dict, html: str, tree: etree
):
    """Adding the html to the error list if an important item was not found."""
    if value is None:
        if not out_of_stock(tree):
            if function_name in html_with_error.keys():
                html_with_error[function_name].append(html)
            else:
                html_with_error[function_name] = [html]
    return value


@decorator_for_logging
def out_of_stock(tree: etree) -> bool:
    """Checking if the product is out of stock"""

    div_tag = tree.find('.//div[@id = "outOfStock"]')

    if div_tag is None:
        return False

    span_tags = div_tag.findall(".//span")

    if span_tags is None:
        return False

    try:
        out_of_stock_text = span_tags[0].text
        if "Derzeit nicht verf√ºgbar" in out_of_stock_text:
            return True
    except (IndexError, AttributeError):
        pass

    return False
