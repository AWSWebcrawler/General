from io import StringIO
from lxml import etree
import logging

"""The item factory parses the passed html text and extracts the desired attributes. The attributes are then stored in a
dictionary and returned."""

def create_item(html):
    """The dictionary contains the attributes als name:value pairs. The value is generated by a method call. """
    logging.debug("Calling the create_item function")

    parser = etree.HTMLParser()
    tree = etree.parse(StringIO(html), parser)

    logging.debug("Tree is created from the parsed html")

    dic = {
        "name": get_name(tree),
        "product_id": get_product_id(tree),
        "price": get_price(tree),
        "price_regular": get_price_regular(tree),
        "prime": get_prime(tree),
        "discount": get_discount(tree),
        "selled_by_amazon": get_selled_by_amazon(tree),
        "seller": get_seller(tree),
        "asin": get_asin(tree),
        "url": get_url(tree),
        "timestamp": get_timestamp(tree),
        "time": get_time(tree),
        "date": get_date(tree),

    }

    return dic


"""The individual methods receive the html text. Select the correct values using the appropriate html tags. 
Validate whether the values make any sense at all and, if necessary, 
transform the values to get the desired return value."""


def get_name(tree):
    """select, validate and transform the name from the html"""

    logging.debug("Calling the get_name function")

    try:
        span = tree.find('.//span[@id = "title"]')

        if span.text != "" and span.text != None:
            logging.debug("item name found")
            return span.text.strip()

        else:
            logging.error("item name is empty")

            return "-"
    except:
        pass

    try:
        span = tree.find('.//span[@id = "productTitle"]')

        if span.text != "" and span.text != None:
            logging.debug("item name found")
            return span.text.strip()

        else:
            logging.error("item name is empty")

    except:
        logging.error("tag for item name not found in html tree")

    return "-"

def get_price(tree):
    """select, validate and transform the price from the html"""

    logging.debug("Calling the get_price function")

    try:
        priceTag = tree.find('.//div[@class = "a-section aok-hidden twister-plus-buying-options-price-data"]')

        if priceTag == None:
            logging.error("tag for item price not found in html tree")

        else:
            try:
                price = priceTag.text.split("\"priceAmount\":")[1].split(",")[0]

                if price != "" and price != None:
                    logging.debug("item price found")
                    return price

                else:
                    logging.error("item price is empty")

            except:
                logging.error("Error during parsing price tag")

    except:
        logging.error("Error by searching item price in the html tree")

    return "-"


def get_selled_by_amazon(tree):
    """select, validate and transform the price from the html"""
    try:
        sellerTag = tree.find('.//a[@id = "bylineInfo"]')

        if sellerTag == None:
            logging.error("tag for item selled_by_amazon not found in html tree")

        else:
            try:
                sellerText = sellerTag.text

                if sellerText != "" and sellerText != None:
                    logging.debug("item selled_by_amazon found")

                    if "Amazon" in sellerText:
                        return True

                    else:
                        return False

                else:
                    logging.error("item selled_by_amazon is empty")

            except:
                logging.error("Error during parsing selled_by_amazon tag")
    except:
        logging.error("Error by searching item selled_by_amazon in the html tree")

    return "-"

def get_date(tree):
    pass


def get_time(tree):
    pass


def get_timestamp(tree):
    pass


def get_url(tree):
    pass


def get_asin(tree):
    try:
        asinTag = tree.find('.//input[@id = "ASIN"]')

        if asinTag == None:
            logging.error("tag for item price not found in html tree")

        else:
            try:
                asin = asinTag.attrib["value"]

                if asin != "" and asin != None:
                    logging.debug("item asin found")
                    return asin

                else:
                    logging.error("item asin is empty")

            except:
                logging.error("Error during parsing asin tag")
    except:
        logging.error("Error by searching item asin in the html tree")

    return "-"


def get_seller(tree):
    try:
        sellerTag = tree.find('.//a[@id = "bylineInfo"]')

        if sellerTag == None:
            logging.error("tag for item seller not found in html tree")

        else:
            try:
                seller = sellerTag.text.split(": ")[1]

                if seller != "" and seller != None:
                    logging.debug("item seller found")
                    return seller

                else:
                    logging.error("item seller is empty")

            except:
                logging.error("Error during parsing seller tag")
    except:
        logging.error("Error by searching item seller in the html tree")

    return "-"


def get_discount(tree):
    pass


def get_prime(tree):
    try:
        primeTags = tree.findall('.//i[@class = "a-icon a-icon-prime"]')

        if primeTags == None:
            logging.error("tag for item prime not found in html tree")

        else:
            logging.debug("item prime found")
            if len(primeTags):
                return True
            else:
                return False


    except:
        logging.error("Error by searching item prime in the html tree")

    return "-"


def get_price_regular(tree):
    pass


def get_product_id(tree):
    pass

