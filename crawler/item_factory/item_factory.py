import logging
import re
from datetime import datetime
from io import StringIO

from lxml import etree

"""The item factory parses the passed html text and extracts the desired attributes. The attributes are then stored in a
dictionary and returned."""


def create_item(html: str, url: str) -> dict:
    """The dictionary contains the attributes as name:value pairs. The value is generated by a method call."""
    logging.debug("Calling the create_item function")

    datetime_now = datetime.now()

    parser = etree.HTMLParser()
    tree = etree.parse(StringIO(html), parser)

    logging.debug("Tree is created from the parsed html")

    dic = {
        "name": _get_name(tree),
        "current_price": _get_current_price(tree),
        "price_regular": _get_regular_price(tree),
        "prime": _get_prime(tree),
        "discount_in_euros": _get_discount_in_euros(tree),
        "percent_discount": _get_percent_discount(tree),
        "sold_by_amazon": _get_sold_by_amazon(tree),
        "seller": _get_seller(tree),
        "amazon_choice": _get_amazon_choice(tree),
        "asin": _get_asin(tree),
        "url": _get_url(url),
        "timestamp": _get_timestamp(datetime_now),
        "date": _get_date(datetime_now),
        "time": _get_time(datetime_now),
    }

    return dic


"""The individual methods receive the html text. Select the correct values using the appropriate html tags. 
Validate whether the values make any sense at all and, if necessary, 
transform the values to get the desired return value."""


def _get_name(tree: etree) -> str:
    """select, validate and transform the item name from the given html-tree"""

    logging.debug("Calling the get_name function")

    # Searching for name_tag on mobile devices
    name_tag = tree.find('.//span[@id = "title"]')

    if name_tag is not None:

        if name_tag.text.strip():
            logging.debug("item name found")
            return name_tag.text.strip()

    # Searching for name_tag on desktop devices
    name_tag = tree.find('.//span[@id = "productTitle"]')

    if name_tag is None:
        logging.error("tag for item name not found in html tree")
        return None

    if name_tag.text.strip():
        logging.debug("item name found")
        return name_tag.text.strip()

    logging.error("item name is empty")

    return None


def _get_current_price(tree: etree) -> float:
    """select, validate and transform the item current_price from the given html-tree"""

    logging.debug("Calling the get_current_price function")

    price_tag = tree.find(
        './/div[@class = "a-section aok-hidden twister-plus-buying-options-price-data"]'
    )

    if price_tag is None:
        logging.error("tag for item current_price not found in html tree")
        return None

    try:
        price: str = price_tag.text.split('"priceAmount":')[1].split(",")[0]

        if price.strip() and price is not None:
            logging.debug("item current_price found")

            if re.match("[0-9]+\.[0-9][0-9]", price):
                return float(price)

            logging.warning("Item current_price has a wrong format")
            return float(price)

        logging.error("item current_price is empty")

    except:
        logging.error("Error during parsing current_price tag")

    return None


def _get_sold_by_amazon(tree: etree) -> bool:
    """select, validate and transform the item sold_by_amazon from the given html-tree"""

    logging.debug("Calling the get_sold_by_amazon function")

    div_tag = tree.find('.//div[@id = "merchant-info"]')

    if div_tag is None:
        logging.error("tag for item sold_by_amazon not found in html tree")
        return False

    try:
        seller_tag = div_tag.find("span")
        seller: str = seller_tag.text
        seller = seller.split(" ")[-1].replace(".", "")

        if "Amazon" in seller:
            return True
        return False

    except:
        logging.error("Error during parsing sold_by_amazon tag")

    return None


def _get_date(datetime_now: datetime) -> str:
    """Returns the date part of the given datetime"""
    logging.debug("Calling the get_date function")

    date = datetime_now.strftime("%Y-%m-%d")
    return date


def _get_time(datetime_now: datetime) -> str:
    """Returns the time part of the given datetime"""
    logging.debug("Calling the get_time function")

    time = datetime_now.strftime("%H:%M:%S")
    return time


def _get_timestamp(datetime_now: datetime) -> float:
    """Returns the unix timestamp of the given datetime"""
    logging.debug("Calling the get_timestamp function")

    ts = datetime.timestamp(datetime_now)
    return ts


def _get_url(url: str) -> str:
    """validate the given url"""

    logging.debug("Calling the get_url function")

    if re.match("^https://www.amazon.de", url):
        return url

    logging.warning("Item url doesn`t start with https://www.amazon.de")
    return url


def _get_asin(tree: etree) -> str:
    """select, validate and transform the item asin from the given html-tree"""
    logging.debug("Calling the get_asin function")

    asin_tag = tree.find('.//input[@id = "ASIN"]')

    if asin_tag is None:
        logging.error("tag for item asin not found in html tree")
        return None

    try:
        asin: str = asin_tag.attrib["value"]

        if asin.strip() and asin is not None:
            logging.debug("item asin found")

            if re.match("^([0-9]|[A-Z])+$", asin):
                return asin

            logging.warning("Item asin has a wrong format")
            return asin

        logging.error("item asin is empty")

    except:
        logging.error("Error during parsing asin tag")

    return None


def _get_seller(tree: etree) -> str:
    """select, validate and transform the item seller from the given html-tree"""
    logging.debug("Calling the get_seller function")

    if _get_sold_by_amazon(tree):
        return "Amazon"

    div_tag = tree.find('.//div[@id = "merchant-info"]')

    if div_tag is None:
        logging.error("tag for item seller not found in html tree")
        return None

    try:
        anchor_tag = div_tag.find("a")
        seller_tag = anchor_tag.find("span")
        seller: str = seller_tag.text

        if seller.strip() and seller is not None:
            logging.debug("item seller found")
            return seller

        logging.error("item seller is empty")

    except:
        logging.error("Error during parsing seller tag")

    return None


def _get_discount_in_euros(tree: etree) -> float:
    """Calling methods to select, validate and transform the item discount_in_euros from the given html-tree"""
    logging.debug("Calling the get_discount function")

    discount: float = None

    discount = _get_discount_in_euros_from_table(tree)

    if discount is None:
        discount = _calculate_discount_in_euros(tree)

    return discount


def _get_discount_in_euros_from_table(tree: etree) -> float:
    """select, validate and transform the item discount_in_euros from the given html-tree"""

    logging.debug("Calling the _get_discount_in_euros_from_table function")

    table_data_tag = tree.find('.//td[@class = "a-span12 a-color-price a-size-base"]')

    if table_data_tag is None:
        return None

    discount_tag = table_data_tag.find('.//span[@class = "a-offscreen"]')

    if discount_tag is None:
        return None

    try:
        # Replacing non numeric characters with blanks -> Stripping all leading and following withespaces -> replacing the blank in the middle of the number with a dot
        discount = discount_tag.text
        discount = re.sub("\D", " ", discount)
        discount = discount.strip()
        discount = re.sub(" ", "", discount)

        if (discount.strip()) and (discount != ".") and (discount is not None):
            logging.debug("item discount_in_euros found")
            return float(discount)
    except:
        pass

    return None

def _calculate_discount_in_euros(tree: etree) -> float:
    """Calculating item discount_in_euros using above implemented methods"""

    logging.debug("Calling the _calculate_discount_in_euros function")

    price = _get_current_price(tree)
    regular_price = _get_regular_price(tree)

    if price is None or regular_price is None:
        logging.error("Can`t calculate item discount_in_euros")
        return None

    if price == regular_price:
        return None

    try:
        discount_in_euros = regular_price - price
        return round(discount_in_euros, 2)

    except:
        logging.error("Error during calculating item discount_in_euros")

    return None

def _get_percent_discount(tree: etree) -> float:
    """Calling methods to select, validate and transform the item discount_in_euros from the given html-tree"""
    logging.debug("Calling the get_discount function")

    percent_discount: float = None

    percent_discount = _get_percent_discount_from_table(tree)

    if percent_discount is None:
        percent_discount = _get_percent_discount_from_span_tag(tree)

    if percent_discount is None:
        percent_discount = _calculate_percent_discount(tree)

    return percent_discount

def _get_percent_discount_from_table(tree: etree) -> float:
    """select, validate and transform the item percent_discount from the given html-tree"""

    logging.debug("Calling the _get_percent_discount_from_table function")

    table_data_tag = tree.find('.//td[@class = "a-span12 a-color-price a-size-base"]')

    if table_data_tag is None:
        return None

    discount_tag = table_data_tag.find('.//span[@data-a-color = "price"]')

    if discount_tag is None:
        return None

    try:
        # Replacing non numeric characters with blanks -> Stripping all leading and following withespaces -> replacing the blank in the middle of the number with a dot
        discount = discount_tag.tail
        discount = re.sub("\D", " ", discount)
        discount = discount.strip()
        discount = re.sub(" ", "", discount)

        if (discount.strip()) and (discount != ".") and (discount is not None):
            logging.debug("item percent_discount found")
            return float(discount)

    except:
        pass

    return None

def _get_percent_discount_from_span_tag(tree: etree) -> float:
    """select, validate and transform the item percent_discount from the given html-tree"""

    logging.debug("Calling the _get_percent_discount_from_span_tag function")

    span_tag = tree.find(
        './/span[@class = "a-size-large a-color-price savingPriceOverride aok-align-center reinventPriceSavingsPercentageMargin savingsPercentage"]'
    )

    if span_tag is None:
        return None
    try:
        discount: str = span_tag.text
        discount = re.sub("\D", "", discount)

        if discount.strip() and discount is not None:
            logging.debug("item percent_discount found")
            return float(discount)

    except:
        pass

    return None

def _calculate_percent_discount(tree: etree) -> float:
    """Calculating item percent_discount using above implemented methods"""

    logging.debug("Calling the _calculate_percent_discount function")

    price = _get_current_price(tree)
    regular_price = _get_regular_price(tree)

    if (price is None) or (regular_price is None) or (regular_price == 0.0):
        logging.error("Can`t calculate item percent_discount")
        return None

    if price == regular_price:
        return None

    try:
        discount_in_euros = regular_price - price
        percent_discount = discount_in_euros * 100 / regular_price
        return round(percent_discount, 2)

    except:
        logging.error("Error during calculating item percent_discount")

    return None

def _get_prime(tree: etree) -> bool:
    """select, validate and transform the item prime from the given html-tree"""
    logging.debug("Calling the get_prime function")

    div_tag = tree.find('.//div[@id = "bbop-sbbop-container"]')

    if div_tag is not None:
        return True
    return False

def _get_regular_price(tree: etree) -> float:
    """select, validate and transform the item regular_price from the given html-tree"""
    logging.debug("Calling the get_regular_price function")

    span_tag = tree.find('.//span[@data-a-color = "secondary"]')

    if span_tag is None:
        logging.info("item regular price not found -> calling function for item current price")
        return _get_current_price(tree)

    current_price_tag = span_tag.find('.//span[@class = "a-offscreen"]')

    if current_price_tag is None:
        logging.info("item regular price not found -> calling function for item current price")
        return _get_current_price(tree)

    try:
        # Replacing non numeric characters with blanks -> Stripping all leading and following withespaces -> replacing the blank in the middle of the number with a dot
        current_price: str = current_price_tag.text
        current_price = re.sub("\D", " ", current_price)
        current_price = current_price.strip()
        current_price = re.sub(" ", "", current_price)

        if (
            current_price.strip()
            and current_price != ","
            and current_price is not None
        ):
            logging.debug("item regular_price found")
            return float(current_price)

        logging.warning("item regular_price is empty")

    except:
        logging.warning("Can not parse item regular_price")

    logging.info("item regular price not found -> calling function for item current price")
    return _get_current_price(tree)


def _get_amazon_choice(tree: etree) -> bool:
    """select, validate and transform the item amazon_choice from the given html-tree"""
    logging.debug("Calling the get_amazon_choice function")

    div_tag = tree.find('.//div[@id = "acBadge_feature_div"]')

    if div_tag is None:
        logging.error("tag for item amazon_choice not found in html tree")
        return False

    span_tags = div_tag.findall("div/span/span/span")

    if span_tags is not None and len(span_tags) > 1:
        return True
    return False

