from io import StringIO
from lxml import etree
import logging
from datetime import datetime
import re

"""The item factory parses the passed html text and extracts the desired attributes. The attributes are then stored in a
dictionary and returned."""


def create_item(html, url):
    """The dictionary contains the attributes as name:value pairs. The value is generated by a method call."""
    logging.debug("Calling the create_item function")

    dt = datetime.now()

    parser = etree.HTMLParser()
    tree = etree.parse(StringIO(html), parser)

    logging.debug("Tree is created from the parsed html")

    dic = {
        "name": get_name(tree),
        "current_price": get_current_price(tree),
        "price_regular": get_regular_price(tree),
        "prime": get_prime(tree),
        "discount_in_euros": get_discount_in_euros(tree),
        "percent_discount": get_percent_discount(tree),
        "sold_by_amazon": get_sold_by_amazon(tree),
        "seller": get_seller(tree),
        "amazon_choice": get_amazon_choice(tree),
        "asin": get_asin(tree),
        "url": get_url(url),
        "timestamp": get_timestamp(dt),
        "date": get_date(dt),
        "time": get_time(dt),
    }

    return dic


"""The individual methods receive the html text. Select the correct values using the appropriate html tags. 
Validate whether the values make any sense at all and, if necessary, 
transform the values to get the desired return value."""


def get_name(tree):
    """select, validate and transform the item name from the given html-tree"""

    logging.debug("Calling the get_name function")

    # Searching for name_tag on mobile devices
    name_tag = tree.find('.//span[@id = "title"]')

    if name_tag is not None:

        if len(name_tag.text):
            logging.debug("item name found")
            return name_tag.text.strip()

        else:
            logging.error("item name is empty")
            # raise item_is_empty_Exception()

    else:

        # Searching for name_tag on desktop devices
        name_tag = tree.find('.//span[@id = "productTitle"]')

        if name_tag is None:
            logging.error("tag for item name not found in html tree")
            # raise html_element_not_found_Exception()

        else:
            if len(name_tag.text):
                logging.debug("item name found")
                return name_tag.text.strip()

            else:
                logging.error("item name is empty")
                # raise item_is_empty_Exception()

    return None


def get_current_price(tree):
    """select, validate and transform the item current_price from the given html-tree"""

    logging.debug("Calling the get_current_price function")

    price_tag = tree.find('.//div[@class = "a-section aok-hidden twister-plus-buying-options-price-data"]')

    if price_tag is None:
        logging.error("tag for item current_price not found in html tree")
        # raise html_element_not_found_Exception()

    else:
        try:
            price = price_tag.text.split("\"priceAmount\":")[1].split(",")[0]

            if len(price) and price is not None:
                logging.debug("item current_price found")

                if re.match('[0-9]+\.[0-9][0-9]', price):
                    return float(price)
                else:
                    logging.warning("Item current_price has a wrong format")
                    return float(price)

            else:
                logging.error("item current_price is empty")
                # raise item_is_empty_Exception()

        except:
            logging.error("Error during parsing current_price tag")
            # raise item_parsing_Exception()

    return None


def get_sold_by_amazon(tree):
    """select, validate and transform the item sold_by_amazon from the given html-tree"""

    logging.debug("Calling the get_sold_by_amazon function")

    div_tag = tree.find('.//div[@id = "merchant-info"]')

    if div_tag is None:
        logging.error("tag for item sold_by_amazon not found in html tree")
        # raise html_element_not_found_Exception()

    else:
        try:
            seller_tag = div_tag.find('span')
            seller = seller_tag.text
            seller = seller.split(" ")[-1].replace(".", "")

            if "Amazon" in seller:
                return True
            else:
                return False

        except:
            logging.error("Error during parsing sold_by_amazon tag")
            # raise item_parsing_Exception()

    return None


def get_date(dt):
    """Returns the date part of the given datetime"""
    logging.debug("Calling the get_date function")

    date = dt.strftime("%Y-%m-%d")
    return date


def get_time(dt):
    """Returns the time part of the given datetime"""
    logging.debug("Calling the get_time function")

    time = dt.strftime("%H:%M:%S")
    return time


def get_timestamp(dt):
    """Returns the unix timestamp of the given datetime"""
    logging.debug("Calling the get_timestamp function")

    ts = datetime.timestamp(dt)
    return ts


def get_url(url):
    """validate the given url"""

    logging.debug("Calling the get_url function")

    if re.match('^https://www.amazon.de', url):
        return url
    else:
        logging.warning("Item url doesn`t start with https://www.amazon.de")
        return url


def get_asin(tree):
    """select, validate and transform the item asin from the given html-tree"""
    logging.debug("Calling the get_asin function")

    asin_tag = tree.find('.//input[@id = "ASIN"]')

    if asin_tag is None:
        logging.error("tag for item asin not found in html tree")
        # raise html_element_not_found_Exception()

    else:
        try:
            asin = asin_tag.attrib["value"]

            if len(asin) and asin is not None:
                logging.debug("item asin found")

                if re.match('^([0-9]|[A-Z])+$', asin):
                    return asin
                else:
                    logging.warning("Item asin has a wrong format")
                    return asin

            else:
                logging.error("item asin is empty")
                # raise item_is_empty_Exception()

        except:
            logging.error("Error during parsing asin tag")
            # raise item_parsing_Exception()

    return None


def get_seller(tree):
    """select, validate and transform the item seller from the given html-tree"""
    logging.debug("Calling the get_seller function")

    if get_sold_by_amazon(tree):
        return "Amazon"
    else:

        div_tag = tree.find('.//div[@id = "merchant-info"]')

        if div_tag is None:
            logging.error("tag for item seller not found in html tree")
            # raise html_element_not_found_Exception()

        try:
            anchor_tag = div_tag.find('a')
            seller_tag = anchor_tag.find('span')
            seller: str = seller_tag.text

            # is_seller_empty = (seller != "")

            if len(seller) and seller is not None:
                logging.debug("item seller found")
                return seller
            else:
                logging.error("item seller is empty")
                # raise item_is_empty_Exception()

        except:
            logging.error("Error during parsing seller tag")
            # raise item_parsing_Exception()

    return None


def get_discount_in_euros(tree):
    """select, validate and transform the item discount_in_euros from the given html-tree"""
    logging.debug("Calling the get_discount function")

    table_data_tag = tree.find('.//td[@class = "a-span12 a-color-price a-size-base"]')

    if table_data_tag is not None:

        discount_tag = table_data_tag.find('.//span[@class = "a-offscreen"]')

        if discount_tag is None:
            logging.error("tag for item discount_in_euros not found in html tree")
            # raise html_element_not_found_Exception()

        else:
            try:
                # Replacing non numeric characters with blanks -> Stripping all leading and following withespaces -> replacing the blank in the middle of the number with a dot
                discount = discount_tag.text
                discount = re.sub('\D', ' ', discount)
                discount = discount.strip()
                discount = re.sub(' ', '.', discount)

                if len(discount) and discount != "." and discount is not None:
                    logging.debug("item discount_in_euros found")
                    return float(discount)

                else:
                    logging.warning("item discount_in_euros is empty")
                    # raise item_is_empty_Exception()

            except:
                logging.warning("Can not parse tag discount_in_euros")
                # raise item_parsing_Exception()

    else:
        price = get_current_price(tree)
        regular_price = get_regular_price(tree)

        if price is not None and regular_price is not None:
            discount_in_euros = regular_price - price
            return round(discount_in_euros, 2)

        else:
            logging.error("tag for item discount_in_euros not found in html tree")
            # raise html_element_not_found_Exception()

    return None


def get_percent_discount(tree):
    """select, validate and transform the item percent_discount from the given html-tree"""
    logging.debug("Calling the get_discount function")

    table_data_tag = tree.find('.//td[@class = "a-span12 a-color-price a-size-base"]')

    if table_data_tag is not None:

        discount_tag = table_data_tag.find('.//span[@data-a-color = "price"]')

        if discount_tag is None:
            logging.error("tag for item percent_discount not found in html tree")
            # raise html_element_not_found_Exception()

        else:
            try:
                # Replacing non numeric characters with blanks -> Stripping all leading and following withespaces -> replacing the blank in the middle of the number with a dot
                discount = discount_tag.tail
                discount = re.sub('\D', ' ', discount)
                discount = discount.strip()
                discount = re.sub(' ', '.', discount)

                if len(discount) and discount != "." and discount is not None:
                    logging.debug("item percent_discount found")
                    return float(discount)

                else:
                    logging.warning("item percent_discount is empty")
                    # raise item_is_empty_Exception()

            except:
                logging.warning("Can not parse tag percent_discount")
                # raise item_parsing_Exception()
    else:

        span_tag = tree.find(
            './/span[@class = "a-size-large a-color-price savingPriceOverride aok-align-center reinventPriceSavingsPercentageMargin savingsPercentage"]')

        if span_tag is not None:
            discount = span_tag.text
            discount = re.sub('\D', '', discount)

            if len(discount) and discount is not None:
                logging.debug("item percent_discount found")
                return float(discount)

            else:
                logging.warning("item percent_discount is empty")
                # raise item_is_empty_Exception()
        else:
            price = get_current_price(tree)
            regular_price = get_regular_price(tree)

            if price is not None and regular_price is not None and regular_price != 0.0:
                discount_in_euros = regular_price - price
                percent_discount = discount_in_euros * 100 / regular_price
                return round(percent_discount, 2)

            else:
                logging.error("tag for item percent_discount not found in html tree")
                # raise html_element_not_found_Exception()
    return None


def get_prime(tree):
    """select, validate and transform the item prime from the given html-tree"""
    logging.debug("Calling the get_prime function")

    prime_tags = tree.findall('.//i[@class = "a-icon a-icon-prime"]')

    if prime_tags is None:
        logging.error("tag for item prime not found in html tree")
        # raise html_element_not_found_Exception()

    else:
        logging.debug("item prime found")
        if len(prime_tags):
            return True
        else:
            return False

    return None


def get_regular_price(tree):
    """select, validate and transform the item regular_price from the given html-tree"""
    logging.debug("Calling the get_regular_price function")

    span_tag = tree.find('.//span[@data-a-color = "secondary"]')

    if span_tag is None:
        logging.error("tag for item regular_price not found in html tree")
        # raise html_element_not_found_Exception()

    else:
        current_price_tag = span_tag.find('.//span[@class = "a-offscreen"]')

        if current_price_tag is None:
            logging.error("tag for item regular_price not found in html tree")
            # raise html_element_not_found_Exception()

        else:
            try:
                # Replacing non numeric characters with blanks -> Stripping all leading and following withespaces -> replacing the blank in the middle of the number with a dot
                current_price = current_price_tag.text
                current_price = re.sub('\D', ' ', current_price)
                current_price = current_price.strip()
                current_price = re.sub(' ', '.', current_price)

                if len(current_price) and current_price != "," and current_price is not None:
                    logging.debug("item regular_price found")
                    return float(current_price)
                else:
                    logging.warning("item regular_price is empty")
                    # raise item_is_empty_Exception()

            except:
                logging.warning("Can not parse item regular_price")
                # raise item_parsing_Exception()

    return get_current_price(tree)


def get_amazon_choice(tree):
    """select, validate and transform the item amazon_choice from the given html-tree"""
    logging.debug("Calling the get_amazon_choice function")

    div_tag = tree.find('.//div[@id = "acBadge_feature_div"]')

    if div_tag is None:
        logging.error("tag for item amazon_choice not found in html tree")
        # raise html_element_not_found_Exception()

    else:
        span_tags = div_tag.findall('div/span/span/span')

        if span_tags is not None and len(span_tags) > 1:
            return True
        else:
            return False

    return None
